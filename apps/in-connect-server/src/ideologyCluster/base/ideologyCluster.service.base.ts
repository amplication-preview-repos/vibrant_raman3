/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  IdeologyCluster as PrismaIdeologyCluster,
} from "@prisma/client";

export class IdeologyClusterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IdeologyClusterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ideologyCluster.count(args);
  }

  async ideologyClusters(
    args: Prisma.IdeologyClusterFindManyArgs
  ): Promise<PrismaIdeologyCluster[]> {
    return this.prisma.ideologyCluster.findMany(args);
  }
  async ideologyCluster(
    args: Prisma.IdeologyClusterFindUniqueArgs
  ): Promise<PrismaIdeologyCluster | null> {
    return this.prisma.ideologyCluster.findUnique(args);
  }
  async createIdeologyCluster(
    args: Prisma.IdeologyClusterCreateArgs
  ): Promise<PrismaIdeologyCluster> {
    return this.prisma.ideologyCluster.create(args);
  }
  async updateIdeologyCluster(
    args: Prisma.IdeologyClusterUpdateArgs
  ): Promise<PrismaIdeologyCluster> {
    return this.prisma.ideologyCluster.update(args);
  }
  async deleteIdeologyCluster(
    args: Prisma.IdeologyClusterDeleteArgs
  ): Promise<PrismaIdeologyCluster> {
    return this.prisma.ideologyCluster.delete(args);
  }
}
