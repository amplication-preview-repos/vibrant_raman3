/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { InterestCluster } from "./InterestCluster";
import { InterestClusterCountArgs } from "./InterestClusterCountArgs";
import { InterestClusterFindManyArgs } from "./InterestClusterFindManyArgs";
import { InterestClusterFindUniqueArgs } from "./InterestClusterFindUniqueArgs";
import { CreateInterestClusterArgs } from "./CreateInterestClusterArgs";
import { UpdateInterestClusterArgs } from "./UpdateInterestClusterArgs";
import { DeleteInterestClusterArgs } from "./DeleteInterestClusterArgs";
import { InterestClusterService } from "../interestCluster.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => InterestCluster)
export class InterestClusterResolverBase {
  constructor(
    protected readonly service: InterestClusterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InterestCluster",
    action: "read",
    possession: "any",
  })
  async _interestClustersMeta(
    @graphql.Args() args: InterestClusterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InterestCluster])
  @nestAccessControl.UseRoles({
    resource: "InterestCluster",
    action: "read",
    possession: "any",
  })
  async interestClusters(
    @graphql.Args() args: InterestClusterFindManyArgs
  ): Promise<InterestCluster[]> {
    return this.service.interestClusters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InterestCluster, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InterestCluster",
    action: "read",
    possession: "own",
  })
  async interestCluster(
    @graphql.Args() args: InterestClusterFindUniqueArgs
  ): Promise<InterestCluster | null> {
    const result = await this.service.interestCluster(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InterestCluster)
  @nestAccessControl.UseRoles({
    resource: "InterestCluster",
    action: "create",
    possession: "any",
  })
  async createInterestCluster(
    @graphql.Args() args: CreateInterestClusterArgs
  ): Promise<InterestCluster> {
    return await this.service.createInterestCluster({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InterestCluster)
  @nestAccessControl.UseRoles({
    resource: "InterestCluster",
    action: "update",
    possession: "any",
  })
  async updateInterestCluster(
    @graphql.Args() args: UpdateInterestClusterArgs
  ): Promise<InterestCluster | null> {
    try {
      return await this.service.updateInterestCluster({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InterestCluster)
  @nestAccessControl.UseRoles({
    resource: "InterestCluster",
    action: "delete",
    possession: "any",
  })
  async deleteInterestCluster(
    @graphql.Args() args: DeleteInterestClusterArgs
  ): Promise<InterestCluster | null> {
    try {
      return await this.service.deleteInterestCluster(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
