/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MusicShare } from "./MusicShare";
import { MusicShareCountArgs } from "./MusicShareCountArgs";
import { MusicShareFindManyArgs } from "./MusicShareFindManyArgs";
import { MusicShareFindUniqueArgs } from "./MusicShareFindUniqueArgs";
import { CreateMusicShareArgs } from "./CreateMusicShareArgs";
import { UpdateMusicShareArgs } from "./UpdateMusicShareArgs";
import { DeleteMusicShareArgs } from "./DeleteMusicShareArgs";
import { MusicShareService } from "../musicShare.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MusicShare)
export class MusicShareResolverBase {
  constructor(
    protected readonly service: MusicShareService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MusicShare",
    action: "read",
    possession: "any",
  })
  async _musicSharesMeta(
    @graphql.Args() args: MusicShareCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MusicShare])
  @nestAccessControl.UseRoles({
    resource: "MusicShare",
    action: "read",
    possession: "any",
  })
  async musicShares(
    @graphql.Args() args: MusicShareFindManyArgs
  ): Promise<MusicShare[]> {
    return this.service.musicShares(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MusicShare, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MusicShare",
    action: "read",
    possession: "own",
  })
  async musicShare(
    @graphql.Args() args: MusicShareFindUniqueArgs
  ): Promise<MusicShare | null> {
    const result = await this.service.musicShare(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MusicShare)
  @nestAccessControl.UseRoles({
    resource: "MusicShare",
    action: "create",
    possession: "any",
  })
  async createMusicShare(
    @graphql.Args() args: CreateMusicShareArgs
  ): Promise<MusicShare> {
    return await this.service.createMusicShare({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MusicShare)
  @nestAccessControl.UseRoles({
    resource: "MusicShare",
    action: "update",
    possession: "any",
  })
  async updateMusicShare(
    @graphql.Args() args: UpdateMusicShareArgs
  ): Promise<MusicShare | null> {
    try {
      return await this.service.updateMusicShare({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MusicShare)
  @nestAccessControl.UseRoles({
    resource: "MusicShare",
    action: "delete",
    possession: "any",
  })
  async deleteMusicShare(
    @graphql.Args() args: DeleteMusicShareArgs
  ): Promise<MusicShare | null> {
    try {
      return await this.service.deleteMusicShare(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MusicShare)
  async uploadFile(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: MusicShareFindUniqueArgs
  ): Promise<MusicShare> {
    return await this.service.uploadFile(args, file);
  }

  @graphql.Mutation(() => MusicShare)
  async deleteFile(
    @graphql.Args()
    args: MusicShareFindUniqueArgs
  ): Promise<MusicShare> {
    return await this.service.deleteFile(args);
  }
}
