/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PartnerMatch } from "./PartnerMatch";
import { PartnerMatchCountArgs } from "./PartnerMatchCountArgs";
import { PartnerMatchFindManyArgs } from "./PartnerMatchFindManyArgs";
import { PartnerMatchFindUniqueArgs } from "./PartnerMatchFindUniqueArgs";
import { CreatePartnerMatchArgs } from "./CreatePartnerMatchArgs";
import { UpdatePartnerMatchArgs } from "./UpdatePartnerMatchArgs";
import { DeletePartnerMatchArgs } from "./DeletePartnerMatchArgs";
import { PartnerMatchService } from "../partnerMatch.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PartnerMatch)
export class PartnerMatchResolverBase {
  constructor(
    protected readonly service: PartnerMatchService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PartnerMatch",
    action: "read",
    possession: "any",
  })
  async _partnerMatchesMeta(
    @graphql.Args() args: PartnerMatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PartnerMatch])
  @nestAccessControl.UseRoles({
    resource: "PartnerMatch",
    action: "read",
    possession: "any",
  })
  async partnerMatches(
    @graphql.Args() args: PartnerMatchFindManyArgs
  ): Promise<PartnerMatch[]> {
    return this.service.partnerMatches(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PartnerMatch, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PartnerMatch",
    action: "read",
    possession: "own",
  })
  async partnerMatch(
    @graphql.Args() args: PartnerMatchFindUniqueArgs
  ): Promise<PartnerMatch | null> {
    const result = await this.service.partnerMatch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PartnerMatch)
  @nestAccessControl.UseRoles({
    resource: "PartnerMatch",
    action: "create",
    possession: "any",
  })
  async createPartnerMatch(
    @graphql.Args() args: CreatePartnerMatchArgs
  ): Promise<PartnerMatch> {
    return await this.service.createPartnerMatch({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PartnerMatch)
  @nestAccessControl.UseRoles({
    resource: "PartnerMatch",
    action: "update",
    possession: "any",
  })
  async updatePartnerMatch(
    @graphql.Args() args: UpdatePartnerMatchArgs
  ): Promise<PartnerMatch | null> {
    try {
      return await this.service.updatePartnerMatch({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PartnerMatch)
  @nestAccessControl.UseRoles({
    resource: "PartnerMatch",
    action: "delete",
    possession: "any",
  })
  async deletePartnerMatch(
    @graphql.Args() args: DeletePartnerMatchArgs
  ): Promise<PartnerMatch | null> {
    try {
      return await this.service.deletePartnerMatch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
