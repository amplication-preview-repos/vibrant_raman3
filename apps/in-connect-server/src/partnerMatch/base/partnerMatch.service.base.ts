/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PartnerMatch as PrismaPartnerMatch } from "@prisma/client";

export class PartnerMatchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PartnerMatchCountArgs, "select">
  ): Promise<number> {
    return this.prisma.partnerMatch.count(args);
  }

  async partnerMatches(
    args: Prisma.PartnerMatchFindManyArgs
  ): Promise<PrismaPartnerMatch[]> {
    return this.prisma.partnerMatch.findMany(args);
  }
  async partnerMatch(
    args: Prisma.PartnerMatchFindUniqueArgs
  ): Promise<PrismaPartnerMatch | null> {
    return this.prisma.partnerMatch.findUnique(args);
  }
  async createPartnerMatch(
    args: Prisma.PartnerMatchCreateArgs
  ): Promise<PrismaPartnerMatch> {
    return this.prisma.partnerMatch.create(args);
  }
  async updatePartnerMatch(
    args: Prisma.PartnerMatchUpdateArgs
  ): Promise<PrismaPartnerMatch> {
    return this.prisma.partnerMatch.update(args);
  }
  async deletePartnerMatch(
    args: Prisma.PartnerMatchDeleteArgs
  ): Promise<PrismaPartnerMatch> {
    return this.prisma.partnerMatch.delete(args);
  }
}
